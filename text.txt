<?php
namespace App\Model\Table;

use Cake\ORM\Query;
use Cake\ORM\RulesChecker;
use Cake\ORM\Table;
use Cake\Validation\Validator;

/**
 * Exams Model
 *
 * @property \App\Model\Table\StudentDetailsTable|\Cake\ORM\Association\HasMany $StudentDetails
 *
 * @method \App\Model\Entity\Exam get($primaryKey, $options = [])
 * @method \App\Model\Entity\Exam newEntity($data = null, array $options = [])
 * @method \App\Model\Entity\Exam[] newEntities(array $data, array $options = [])
 * @method \App\Model\Entity\Exam|bool save(\Cake\Datasource\EntityInterface $entity, $options = [])
 * @method \App\Model\Entity\Exam patchEntity(\Cake\Datasource\EntityInterface $entity, array $data, array $options = [])
 * @method \App\Model\Entity\Exam[] patchEntities($entities, array $data, array $options = [])
 * @method \App\Model\Entity\Exam findOrCreate($search, callable $callback = null, $options = [])
 */
class ExamsTable extends Table
{

    /**
     * Initialize method
     *
     * @param array $config The configuration for the Table.
     * @return void
     */
    public function initialize(array $config)
    {
        parent::initialize($config);

        $this->setTable('exams');
        $this->setDisplayField('id');
        $this->setPrimaryKey('id');

        $this->hasMany('StudentDetails', [
            'foreignKey' => 'exam_id'
        ]);
   /**    SELECT  Id,
        SUM(IF( Unit(total_marks) = unit, total, 0)) AS unit1,
         SUM(IF( Unit(total_marks) = unit, total, 0)) AS unit2,
                 SUM(IF( Unit(total_marks) = unit, total, 0)) AS unit3,
                         SUM(IF( Unit(total_marks) = unit, total, 0)) AS unit4,
                                 SUM(IF( Unit(total_marks) = unit,total, 0)) AS unit5,
        SUM(amount) AS total_marks
FROM exams
GROUP BY total_marks  */
    }

    /**
     * Default validation rules.
     *
     * @param \Cake\Validation\Validator $validator Validator instance.
     * @return \Cake\Validation\Validator
     */
    public function validationDefault(Validator $validator)
    {
        $validator
            ->integer('id')
            ->allowEmpty('id', 'create');

        $validator
            ->scalar('stud_name')
            ->maxLength('stud_name', 255)
            ->requirePresence('stud_name', 'create')
            ->notEmpty('stud_name');

        $validator
            ->scalar('course_name')
            ->maxLength('course_name', 255)
            ->requirePresence('course_name', 'create')
            ->notEmpty('course_name');

        $validator
            ->integer('unit1')
            ->requirePresence('unit1', 'create')
            ->notEmpty('unit1');

        $validator
            ->integer('unit2')
            ->requirePresence('unit2', 'create')
            ->notEmpty('unit2');

        $validator
            ->integer('unit3')
            ->requirePresence('unit3', 'create')
            ->notEmpty('unit3');

        $validator
            ->integer('unit4')
            ->requirePresence('unit4', 'create')
            ->notEmpty('unit4');

        $validator
            ->integer('unit5')
            ->requirePresence('unit5', 'create')
            ->notEmpty('unit5');

        

        return $validator;
    }
//   public function sum (){
//       $this->setTable('exams');
//       pr($this->exams->find('all', array('fields'=>array ('unit2','unit2','unit3','unit4','unit5', 'COUNT(id) AS total_marks',
//                                         'group'=>array('total_marks'),
//                                         'recursive'=>-1)))
//    } 
// public function totalmarks(){
//    SELECT id, 
//               FORMAT(SUM(unit1 * unit2 *unit3 * unit4 * unit5),5)total_marks
//            FROM exams
//              GROUP BY id
//             GROUP BY SUM(unit1 * unit2 * unit3 * unit4 * unit5)DESC;
public function calculate_sum() {
     
}
}